grid_map_filters:

  - name: buffer_normalizer
    type: gridMapFilters/BufferNormalizerFilter

  # Inpainting
  - name: inpainting
    type: gridMapCv/InpaintFilter
    params:
      input_layer: elevation
      output_layer: elevation_inpainted_original
      radius: 0.1 # in m
  
  # Inpainting
  - name: denoise_inpaint
    type: gridMapFiltersDrs/DenoiseAndInpaintFilter
    params:
      input_layer: elevation
      output_layer: elevation_inpainted
      radius: 0.1 # in m
      inpainting_type: ns # 'ns' or 'telea' allowed
      pre_denoising: true # enables denoising before inpainting
      denoising_radius: 0.15 # m
      denoising_type: total_variation # 'total_variation', 'non_local', 'gaussian', and 'median' supported
  
  - name: learned_risk
    type: gridMapFiltersDrs/LearnedMotionCostsFilter
    params:
      input_layer: elevation_inpainted
      output_layer: risk_learned
      cost_layer: risk
      service_name: /traversability_server/compute_traversability
  
  - name: traversability_learned
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability_learned
      expression: 1.0 - (risk_learned / (max(risk_learned) - min(risk_learned)) + min(risk_learned))
  
  # Compute surface normals (fast)
  # Default positive vector is z axis
  - name: surface_normals_fast
    type: gridMapFiltersDrs/FastNormalsVectorFilter
    params:
      input_layer: elevation_inpainted
      output_layers_prefix: normal_
      use_pre_smoothing: true
      use_post_smoothing: true
      pre_smoothing_radius: 0.15 # spatial gaussian filter (in meters)
      post_smoothing_radius: 0.1 # spatial median filter (in meters)
  
  # # Rotate surface normals.
  # - name: rotate_surface_normals
  #   type: gridMapFiltersDrs/ChangeNormalsFrameFilter
  #   params:
  #     input_layers_prefix: normal_
  #     target_frame: base_link
 
  # Compute slope from surface normal.
  - name: slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope
      expression: acos(normal_z)
  
  # Compute traversability as normalized weighted sum of slope and roughness.
  - name: traversability_geometric
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability_geometric
      expression: (1.0 - (slope / 0.6))
       
  # Compute 2D Signed Distance Field
  - name: sdf
    type: gridMapFiltersDrs/SignedDistanceField2dFilter
    params:
      input_layer: traversability_learned
      output_layer: sdf
      normalize_gradients: true
      threshold: 0.2 # lower thresholds are more relaxed

  # Geodesic distance field
  - name: geodesic
    type: gridMapFiltersDrs/GeodesicDistanceField2dFilter
    params:
      input_layer: traversability_learned
      output_layer: geodesic
      normalize_gradients: true
      attractor_topic: /goal #/move_base_simple/goal
      threshold: 0.2 # To be applied to the input_layer
      use_field_smoothing: false
      field_smoothing_radius: 0.5