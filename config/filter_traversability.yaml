grid_map_filters:

  - name: buffer_normalizer
    type: gridMapFilters/BufferNormalizerFilter

  # # Duplicate layer.
  - name: duplicate
    type: gridMapFilters/DuplicationFilter
    params:
      input_layer: elevation
      output_layer: elevation_inpainted

  # Reduce noise with a radial blurring filter.
  - name: mean_in_radius
    type: gridMapFilters/MeanInRadiusFilter
    params:
      input_layer: elevation_inpainted
      output_layer: elevation_smooth
      radius: 0.0

  # Compute surface normals.
  - name: surface_normals
    type: gridMapFilters/NormalVectorsFilter
    params:
      input_layer: elevation_smooth
      output_layers_prefix: normal_vectors_
      radius: 0.15
      normal_vector_positive_axis: z

  # Add a color layer for visualization based on the surface normal.
  - name: normal_color_map
    type: gridMapFilters/NormalColorMapFilter
    params:
      input_layers_prefix: normal_vectors_
      output_layer: normal_color

  # Compute slope from surface normal.
  - name: slope
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: slope
      expression: acos(normal_vectors_z)

  # Compute roughness as absolute difference from map to smoothened map.
  - name: roughness
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: roughness
      expression: abs(elevation_inpainted - elevation_smooth)

  # Edge detection by computing the standard deviation from slope.
  - name: edge_detection
    type: gridMapFilters/SlidingWindowMathExpressionFilter
    params:
      input_layer: slope
      output_layer: edges
      expression: sqrt(sumOfFinites(square(slope - meanOfFinites(slope))) ./ numberOfFinites(slope)) # Standard deviation
      compute_empty_cells: false
      edge_handling: crop # options: inside, crop, empty, mean
      window_length: 0.2

  # Compute traversability as normalized weighted sum of slope and roughness.
  - name: traversability
    type: gridMapFilters/MathExpressionFilter
    params:
      output_layer: traversability
      expression: 0.5 * (1.0 - (slope / 0.6)) + 0.5 * (1.0 - (roughness / 0.1))

